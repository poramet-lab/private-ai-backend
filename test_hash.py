# test_hash.py
from passlib.context import CryptContext
import sys

# ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô auth_api.py
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
plain_password = "password"

# hash ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå auth_config.py ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
hashed_password = "$2b$12$Jd.oOC5VIOMfXz5a925.d.V3bO8q.z/y9G2P.6K.Yq.a.b.c.d.e"

print(f"Python version: {sys.version}")
print(f"Testing hash: {hashed_password}")
print(f"Plain password: {plain_password}")
print("-" * 20)

try:
    # ‡∏•‡∏≠‡∏á verify ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    is_valid = pwd_context.verify(plain_password, hashed_password)

    if is_valid:
        print("‚úÖ SUCCESS: Hash is valid and matches the password.")
    else:
        print("‚ùå FAILED: Hash is valid, but does NOT match the password.")

except Exception as e:
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ hash ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    print(f"üí• ERROR: An exception occurred. The hash is likely malformed.")
    print(f"Exception Type: {type(e).__name__}")
    print(f"Exception Details: {e}")

